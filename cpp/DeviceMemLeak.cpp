/*----- PROTECTED REGION ID(DeviceMemLeak.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        DeviceMemLeak.cpp
//
// description : C++ source for the DeviceMemLeak class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               DeviceMemLeak are implemented in this file.
//
// project :     DeviceMemLeak
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <DeviceMemLeak.h>
#include <DeviceMemLeakClass.h>
#include <chrono>

/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak.cpp

/**
 *  DeviceMemLeak class description:
 *    Device class to tests TangoTickets#30
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name      |  Method name
//================================================================
//  State             |  Inherited (no method)
//  Status            |  Inherited (no method)
//  Start             |  start
//  Stop              |  stop
//  PushEncodedEvent  |  push_encoded_event
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  attr1  |  Tango::DevEncoded	Scalar
//================================================================

namespace DeviceMemLeak_ns
{
/*----- PROTECTED REGION ID(DeviceMemLeak::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::DeviceMemLeak()
 *	Description : Constructors for a Tango device
 *                implementing the classDeviceMemLeak
 */
//--------------------------------------------------------
DeviceMemLeak::DeviceMemLeak(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::constructor_1
}
//--------------------------------------------------------
DeviceMemLeak::DeviceMemLeak(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::constructor_2
}
//--------------------------------------------------------
DeviceMemLeak::DeviceMemLeak(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void DeviceMemLeak::delete_device()
{
	DEBUG_STREAM << "DeviceMemLeak::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	stop();
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::delete_device
	delete[] attr_attr1_read;
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void DeviceMemLeak::init_device()
{
	DEBUG_STREAM << "DeviceMemLeak::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	push_thread = nullptr;
	stop_requested = true;
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_attr1_read = new Tango::DevEncoded[1];
	/*----- PROTECTED REGION ID(DeviceMemLeak::init_device) ENABLED START -----*/
	
	//	Initialize device
	set_state(Tango::ON);
	
	attr_attr1_read->encoded_format = Tango::string_dup("MyCustomFormat");
	attr_attr1_read->encoded_data.length(10);
	
	for (unsigned int i = 0; i < 10; i++)
	{
		attr_attr1_read->encoded_data[i] = i;
	}
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::init_device
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void DeviceMemLeak::get_device_property()
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ThreadSleepTimeMs"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on DeviceMemLeakClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		DeviceMemLeakClass	*ds_class =
			(static_cast<DeviceMemLeakClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ThreadSleepTimeMs from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  threadSleepTimeMs;
		else {
			//	Try to initialize ThreadSleepTimeMs from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  threadSleepTimeMs;
		}
		//	And try to extract ThreadSleepTimeMs value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  threadSleepTimeMs;

	}

	/*----- PROTECTED REGION ID(DeviceMemLeak::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void DeviceMemLeak::always_executed_hook()
{
	DEBUG_STREAM << "DeviceMemLeak::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void DeviceMemLeak::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "DeviceMemLeak::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute attr1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevEncoded
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void DeviceMemLeak::read_attr1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "DeviceMemLeak::read_attr1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::read_attr1) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_attr1_read);
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::read_attr1
}

//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void DeviceMemLeak::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Start related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void DeviceMemLeak::start()
{
	DEBUG_STREAM << "DeviceMemLeak::Start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::start) ENABLED START -----*/
	
	//	Add your own code
	if(push_thread != nullptr)
	{
			Tango::Except::throw_exception("ThreadAlreadyRunning",
			                               "The thread pushing the events is already running",
			                               "DeviceMemLeak::start()");
	}
	stop_requested = false;
	push_thread = new::std::thread(&DeviceMemLeak::push_thread_execution, this);
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::start
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void DeviceMemLeak::stop()
{
	DEBUG_STREAM << "DeviceMemLeak::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::stop) ENABLED START -----*/
	
	//	Add your own code
	if(push_thread != nullptr)
	{
		stop_requested = true;
		push_thread->join();
		delete push_thread;
		push_thread = nullptr;
	}
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::stop
}
//--------------------------------------------------------
/**
 *	Command PushEncodedEvent related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void DeviceMemLeak::push_encoded_event()
{
	DEBUG_STREAM << "DeviceMemLeak::PushEncodedEvent()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(DeviceMemLeak::push_encoded_event) ENABLED START -----*/
	
	//	Add your own code
	push_change_event("attr1",attr_attr1_read);
	
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::push_encoded_event
}
//--------------------------------------------------------
/**
 *	Method      : DeviceMemLeak::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void DeviceMemLeak::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(DeviceMemLeak::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::add_dynamic_commands
}

/*----- PROTECTED REGION ID(DeviceMemLeak::namespace_ending) ENABLED START -----*/

//	Additional Methods
void DeviceMemLeak::push_thread_execution()
{
	unsigned long i = 1;
	struct timeval now;
	while(!stop_requested)
	{
		gettimeofday(&now,NULL);
		std::cout << "push_thread_execution: iteration #" << i++ << endl;
		push_change_event("attr1",attr_attr1_read, now, Tango::ATTR_VALID);
		std::this_thread::sleep_for(std::chrono::milliseconds(threadSleepTimeMs));
	}
}
/*----- PROTECTED REGION END -----*/	//	DeviceMemLeak::namespace_ending
} //	namespace
